#
# Commands dependencies
# =====================
#
DIRENV_CMD_DEPENDENCIES="unzip tar mkdir curl chmod rm"
for mandatory_cmd in ${DIRENV_CMD_DEPENDENCIES}; do
    if [ -z "$(which ${mandatory_cmd})" ]; then
         echo "===> Mandatory command not found: ${mandatory_cmd}"
         exit 1
    fi
done
#
# Direnv configuration
# =====================
#
layout_python3
export DIRENV_TMP_DIR="${PWD}/.direnv"
export DIRENV_BIN_DIR="${DIRENV_TMP_DIR}/bin"
if [ ! -e "${DIRENV_BIN_DIR}" ]; then
    mkdir -p "${DIRENV_BIN_DIR}"
fi
export PATH="${DIRENV_BIN_DIR}:${PATH}"
#
# Ansible configuration
# =====================
#
export ANSIBLE_LIBRARY="${PWD}/plugins/modules:${ANSIBLE_LIBRARY}"
#export ANSIBLE_STRATEGY_PLUGINS="${PWD}/$(find .direnv/ -type d | grep mitogen | grep plugins | grep strategy | grep -v pycache)"
#export ANSIBLE_STRATEGY="mitogen_linear"
if [ -e "${PWD}/ssh.cfg" ]; then
    export ANSIBLE_SSH_ARGS="-F ${PWD}/ssh.cfg"
fi
export ANSIBLE_COLLECTIONS_PATHS="${DIRENV_TMP_DIR}"
#
# Environment configuration
# =========================
#
# Customize your project environment by filling these files with variables exports
# at the root of your project.
#
ENV_ADDONS=".env.aws .env.gandi .env.factory .env.drone .env.scw .env.galaxy"
for addon in ${ENV_ADDONS}; do
    if [ -e "${PWD}/${addon}" ]; then
        source ${PWD}/${addon}
    fi
done
#
# Helm CLI installation
# =====================
#
HELM_VERSION="3.9.0"
HELM_ARCH="linux-amd64"
HELM_PKG_NAME="helm-v${HELM_VERSION}-${HELM_ARCH}.tar.gz"
HELM_PKG_URL="https://get.helm.sh/${HELM_PKG_NAME}" 
HELM_PKG_PATH="${DIRENV_TMP_DIR}/${HELM_PKG_NAME}" 
# if HELM binary is not found
if [ ! -e "${DIRENV_BIN_DIR}/helm" ]; then
    echo "===> Getting helm:${HELM_VERSION}:${HELM_ARCH} (can take a while to execute)"
    curl -s -L "${HELM_PKG_URL}" -o "${HELM_PKG_PATH}"
    tar zx -f ${HELM_PKG_PATH} -C ${DIRENV_TMP_DIR}
    mv ${DIRENV_TMP_DIR}/${HELM_ARCH}/helm ${DIRENV_BIN_DIR}
    chmod 700 ${DIRENV_BIN_DIR}/helm
    rm -rf ${DIRENV_TMP_DIR}/${HELM_ARCH} ${HELM_PKG_PATH}
fi


# https://github.com/derailed/k9s/releases/download/v0.25.18/k9s_Linux_x86_64.tar.gz
K9S_VERSION="0.25.18"
K9S_ARCH="Linux_x86_64"
K9S_PKG_NAME="k9s_${K9S_ARCH}.tar.gz"
K9S_PKG_URL="https://github.com/derailed/k9s/releases/download/v${K9S_VERSION}/${K9S_PKG_NAME}"
K9S_PKG_PATH="${DIRENV_TMP_DIR}/${K9S_PKG_NAME}" 
# if k9s binary is not found
if [ ! -e "${DIRENV_BIN_DIR}/k9s" ]; then
    echo "===> Getting k9s:${K9S_VERSION}:${K9S_ARCH} (can take a while to execute)"
    curl -s -L "${K9S_PKG_URL}" -o "${K9S_PKG_PATH}"
    tar xz -f ${K9S_PKG_PATH} -C ${DIRENV_TMP_DIR}
    mv ${DIRENV_TMP_DIR}/k9s ${DIRENV_BIN_DIR}
    chmod 700 ${DIRENV_BIN_DIR}/k9s
    rm -rf ${DIRENV_TMP_DIR}/LICENSE ${DIRENV_TMP_DIR}/README.md ${K9S_PKG_PATH}
fi

